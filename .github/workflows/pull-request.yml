name: Pull Request Workflow

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint Code
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  test:
    name: Unit Tests
    runs-on: macos-latest
    needs: [lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test -- --coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  status-comment:
    name: PUpdate PR Statue
    runs-on: macos-latest
    needs: [test]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Create status comment
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let coverageSummary = 'Coverage data not available';
            try {
              const summaryPath = './coverage/coverage-summary.json';
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                const total = summary.total;
                
                coverageSummary = `
                | Type | Coverage |
                | ---- | -------- |
                | Statements | ${total.statements.pct}% |
                | Branches | ${total.branches.pct}% |
                | Functions | ${total.functions.pct}% |
                | Lines | ${total.lines.pct}% |
                `;
              }
            } catch (error) {
              console.error('Error reading coverage summary:', error);
              coverageSummary = 'Error reading coverage data';
            }

            const commentBody = `## CI Status: ✅ All checks passed!

            ### Test Coverage Summary
            ${coverageSummary}

            *This comment was automatically generated by GitHub Actions.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Create failure comment
        if: ${{ needs.lint.result != 'success' || needs.test.result != 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let failureDetails = '';

            if ('${{ needs.lint.result }}' !== 'success') {
              failureDetails += '- ❌ Linting failed\n';
            }

            if ('${{ needs.test.result }}' !== 'success') {
              failureDetails += '- ❌ Unit tests failed\n';
            }

            const commentBody = `## CI Status: ❌ Checks failed!

            ### Failure Details
            ${failureDetails}

            Please check the workflow logs for more details.

            *This comment was automatically generated by GitHub Actions.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
